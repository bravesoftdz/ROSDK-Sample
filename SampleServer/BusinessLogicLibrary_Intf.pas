//------------------------------------------------------------------------------
// <autogenerated>
//     This Oxygene source code was generated by a tool.
//     Runtime Version: 4.0.30319.34014
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

{$HIDE H7}
{$HIDE W1}
{$HIDE W27}
{$HIDE H11}

namespace SampleServer;

interface

uses
  System,
  System.Collections.Generic,
  RemObjects.SDK,
  RemObjects.SDK.Types;
  
type
  IBusinessLogicService = public interface(RemObjects.SDK.IROService)
    method Process(Value: System.String): System.Int32;
    method &Reverse(Value: System.String): System.String;
  end;
  
  BusinessLogicService_Proxy = public partial class(RemObjects.SDK.Proxy, IBusinessLogicService)
  protected 
    [System.CLSCompliantAttribute(false)]
    method __GetInterfaceName: System.String; override;
  public 
    constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
    constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
    constructor(remoteService: RemObjects.SDK.IRemoteService);
    constructor(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
    constructor(uri: System.Uri);
    constructor(url: System.String);
    method Process(Value: System.String): System.Int32; virtual;
    method &Reverse(Value: System.String): System.String; virtual;
  end;
  
  CoBusinessLogicService = public class
  public 
    class method &Create(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel): IBusinessLogicService;
    class method &Create(remoteService: RemObjects.SDK.IRemoteService): IBusinessLogicService;
    class method &Create(uri: System.Uri): IBusinessLogicService;
    class method &Create(url: System.String): IBusinessLogicService;
  end;
  
  IBusinessLogicService_Async = public interface(RemObjects.SDK.IROService_Async)
    method BeginProcess(Value: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
    method EndProcess(__AsyncResult: System.IAsyncResult): System.Int32;
    method ProcessAsync(Value: System.String): System.Threading.Tasks.Task<System.Int32>;
    method BeginReverse(Value: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
    method EndReverse(__AsyncResult: System.IAsyncResult): System.String;
    method ReverseAsync(Value: System.String): System.Threading.Tasks.Task<System.String>;
  end;
  
  BusinessLogicService_AsyncProxy = public partial class(RemObjects.SDK.AsyncProxy, IBusinessLogicService_Async)
  protected 
    [System.CLSCompliantAttribute(false)]
    method __GetInterfaceName: System.String; override;
  public 
    constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
    constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
    constructor(remoteService: RemObjects.SDK.IRemoteService);
    constructor(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
    constructor(uri: System.Uri);
    constructor(url: System.String);
    method BeginProcess(Value: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult; virtual;
    method EndProcess(__AsyncResult: System.IAsyncResult): System.Int32; virtual;
    method ProcessAsync(Value: System.String): System.Threading.Tasks.Task<System.Int32>; virtual;
    method BeginReverse(Value: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult; virtual;
    method EndReverse(__AsyncResult: System.IAsyncResult): System.String; virtual;
    method ReverseAsync(Value: System.String): System.Threading.Tasks.Task<System.String>; virtual;
  end;
  
implementation

{ BusinessLogicService_Proxy }

method BusinessLogicService_Proxy.__GetInterfaceName: System.String;
begin
  exit('BusinessLogicService');
end;

constructor BusinessLogicService_Proxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
begin
  inherited constructor(message, clientChannel);
end;

constructor BusinessLogicService_Proxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
begin
  inherited constructor(message, clientChannel, interfaceName);
end;

constructor BusinessLogicService_Proxy(remoteService: RemObjects.SDK.IRemoteService);
begin
  inherited constructor(remoteService);
end;

constructor BusinessLogicService_Proxy(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
begin
  inherited constructor(remoteService, interfaceName);
end;

constructor BusinessLogicService_Proxy(uri: System.Uri);
begin
  inherited constructor(uri);
end;

constructor BusinessLogicService_Proxy(url: System.String);
begin
  inherited constructor(url);
end;

method BusinessLogicService_Proxy.Process(Value: System.String): System.Int32;
begin
  var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
  __LocalMessage.InitializeRequestMessage(__ClientChannel, 'BusinessLogicLibrary', __GetActiveInterfaceName(), 'Process');
  __LocalMessage.WriteUtf8String('Value', Value);
  __LocalMessage.FinalizeMessage();
  __ClientChannel.Dispatch(__LocalMessage);
  var _Result: System.Int32 := __LocalMessage.ReadInt32('Result');
  __LocalMessage.Clear();
  exit(_Result);
end;

method BusinessLogicService_Proxy.&Reverse(Value: System.String): System.String;
begin
  var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
  __LocalMessage.InitializeRequestMessage(__ClientChannel, 'BusinessLogicLibrary', __GetActiveInterfaceName(), 'Reverse');
  __LocalMessage.WriteWideString('Value', Value);
  __LocalMessage.FinalizeMessage();
  __ClientChannel.Dispatch(__LocalMessage);
  var _Result: System.String := __LocalMessage.ReadWideString('Result');
  __LocalMessage.Clear();
  exit(_Result);
end;

{ CoBusinessLogicService }

class method CoBusinessLogicService.&Create(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel): IBusinessLogicService;
begin
  exit(new BusinessLogicService_Proxy(message, clientChannel));
end;

class method CoBusinessLogicService.&Create(remoteService: RemObjects.SDK.IRemoteService): IBusinessLogicService;
begin
  exit(new BusinessLogicService_Proxy(remoteService));
end;

class method CoBusinessLogicService.&Create(uri: System.Uri): IBusinessLogicService;
begin
  exit(new BusinessLogicService_Proxy(uri));
end;

class method CoBusinessLogicService.&Create(url: System.String): IBusinessLogicService;
begin
  exit(new BusinessLogicService_Proxy(url));
end;

{ BusinessLogicService_AsyncProxy }

method BusinessLogicService_AsyncProxy.__GetInterfaceName: System.String;
begin
  exit('BusinessLogicService');
end;

constructor BusinessLogicService_AsyncProxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
begin
  inherited constructor(message, clientChannel);
end;

constructor BusinessLogicService_AsyncProxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
begin
  inherited constructor(message, clientChannel, interfaceName);
end;

constructor BusinessLogicService_AsyncProxy(remoteService: RemObjects.SDK.IRemoteService);
begin
  inherited constructor(remoteService);
end;

constructor BusinessLogicService_AsyncProxy(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
begin
  inherited constructor(remoteService, interfaceName);
end;

constructor BusinessLogicService_AsyncProxy(uri: System.Uri);
begin
  inherited constructor(uri);
end;

constructor BusinessLogicService_AsyncProxy(url: System.String);
begin
  inherited constructor(url);
end;

method BusinessLogicService_AsyncProxy.BeginProcess(Value: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
begin
  var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
  __LocalMessage.InitializeRequestMessage(__ClientChannel, 'BusinessLogicLibrary', __GetActiveInterfaceName(), 'Process');
  __LocalMessage.WriteUtf8String('Value', Value);
  __LocalMessage.FinalizeMessage();
  exit(__ClientChannel.AsyncDispatch(__LocalMessage, __Callback, __UserData));
end;

method BusinessLogicService_AsyncProxy.EndProcess(__AsyncResult: System.IAsyncResult): System.Int32;
begin
  var __LocalMessage: RemObjects.SDK.IMessage := (__AsyncResult as RemObjects.SDK.IClientAsyncResult).Message;
  var &Result: System.Int32 := __LocalMessage.ReadInt32('Result');
  __LocalMessage.Clear();
  exit(&Result);
end;

method BusinessLogicService_AsyncProxy.ProcessAsync(Value: System.String): System.Threading.Tasks.Task<System.Int32>;
begin
  exit(System.Threading.Tasks.Task<System.Int32>.Factory.FromAsync(self.BeginProcess(Value, nil, nil), new System.Func<System.IAsyncResult, System.Int32>(@self.EndProcess)));
end;

method BusinessLogicService_AsyncProxy.BeginReverse(Value: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
begin
  var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
  __LocalMessage.InitializeRequestMessage(__ClientChannel, 'BusinessLogicLibrary', __GetActiveInterfaceName(), 'Reverse');
  __LocalMessage.WriteWideString('Value', Value);
  __LocalMessage.FinalizeMessage();
  exit(__ClientChannel.AsyncDispatch(__LocalMessage, __Callback, __UserData));
end;

method BusinessLogicService_AsyncProxy.EndReverse(__AsyncResult: System.IAsyncResult): System.String;
begin
  var __LocalMessage: RemObjects.SDK.IMessage := (__AsyncResult as RemObjects.SDK.IClientAsyncResult).Message;
  var &Result: System.String := __LocalMessage.ReadWideString('Result');
  __LocalMessage.Clear();
  exit(&Result);
end;

method BusinessLogicService_AsyncProxy.ReverseAsync(Value: System.String): System.Threading.Tasks.Task<System.String>;
begin
  exit(System.Threading.Tasks.Task<System.String>.Factory.FromAsync(self.BeginReverse(Value, nil, nil), new System.Func<System.IAsyncResult, System.String>(@self.EndReverse)));
end;

end.
